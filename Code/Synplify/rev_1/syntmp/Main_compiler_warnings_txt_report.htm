<html><body><samp><pre>
<!@TC:0>
<font color=#A52A2A>@W:<a href="@W:CL271:@XP_HELP">CL271</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp.sv:27:0:27:9:@W:CL271:@XP_MSG">gdp.sv(27)</a><!@TM:0> | Pruning bits 30 to 15 of result[31:0] -- not in use ...</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_9_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_8_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_7_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_6_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_5_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_4_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_3_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_2_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_1_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL118:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | Latch generated from always block for signal x_buf_0_[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL218:@XP_HELP">CL218</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:126:1:126:3:@W:CL218:@XP_MSG">gdp_controller.sv(126)</a><!@TM:0> | always_latch does not infer latch logic</font>
<font color=#A52A2A>@W:<a href="@W:CL254:@XP_HELP">CL254</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\sram.sv:71:2:71:6:@W:CL254:@XP_MSG">sram.sv(71)</a><!@TM:0> | A possible syn_keep on a reg that results in sequential logic - assuming that a tristate can be transmitted through : signal name could change</font>
<font color=#A52A2A>@W:<a href="@W:CL118:@XP_HELP">CL118</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\sram.sv:71:2:71:6:@W:CL118:@XP_MSG">sram.sv(71)</a><!@TM:0> | Latch generated from always block for signal svbl_105.buffer[15:0]; possible missing assignment in an if or case statement.</font>
<font color=#A52A2A>@W:<a href="@W:CL249:@XP_HELP">CL249</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\top_level.sv:93:0:93:9:@W:CL249:@XP_MSG">top_level.sv(93)</a><!@TM:0> | Initial value is not supported on state machine state</font>
<font color=#A52A2A>@W:<a href="@W:CL249:@XP_HELP">CL249</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\sram.sv:32:0:32:9:@W:CL249:@XP_MSG">sram.sv(32)</a><!@TM:0> | Initial value is not supported on state machine state</font>
<font color=#A52A2A>@W:<a href="@W:CL249:@XP_HELP">CL249</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\send.sv:30:0:30:9:@W:CL249:@XP_MSG">send.sv(30)</a><!@TM:0> | Initial value is not supported on state machine state</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[2] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[3] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[4] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[5] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[6] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[7] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[8] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[9] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[10] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[11] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[12] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[13] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[14] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[15] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[16] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[17] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[18] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[19] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[20] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[21] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[22] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[23] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[24] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[25] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[26] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[27] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[28] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[29] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[30] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL189:@XP_HELP">CL189</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL189:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Register bit state[31] is always 0, optimizing ...</font>
<font color=#A52A2A>@W:<a href="@W:CL279:@XP_HELP">CL279</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\normaliser.sv:30:0:30:9:@W:CL279:@XP_MSG">normaliser.sv(30)</a><!@TM:0> | Pruning register bits 31 to 2 of state[31:0] </font>
<font color=#A52A2A>@W:<a href="@W:CL249:@XP_HELP">CL249</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp_controller.sv:49:0:49:9:@W:CL249:@XP_MSG">gdp_controller.sv(49)</a><!@TM:0> | Initial value is not supported on state machine state</font>
<font color=#A52A2A>@W:<a href="@W:CL279:@XP_HELP">CL279</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp.sv:27:0:27:9:@W:CL279:@XP_MSG">gdp.sv(27)</a><!@TM:0> | Pruning register bits 31 to 22 of square_out[31:0] </font>
<font color=#A52A2A>@W:<a href="@W:CL279:@XP_HELP">CL279</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\gdp.sv:27:0:27:9:@W:CL279:@XP_MSG">gdp.sv(27)</a><!@TM:0> | Pruning register bits 31 to 22 of scale_out[31:0] </font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[15] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL260:@XP_HELP">CL260</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL260:@XP_MSG">uart.sv(59)</a><!@TM:0> | Pruning register bit 15 of rx_index[15:0] </font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[5] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[6] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[7] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[8] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[9] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[10] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[11] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[12] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[13] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL190:@XP_HELP">CL190</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL190:@XP_MSG">uart.sv(59)</a><!@TM:0> | Optimizing register bit rx_index[14] to a constant 0</font>
<font color=#A52A2A>@W:<a href="@W:CL279:@XP_HELP">CL279</a> : <a href="H:\work\Part3\P3-Project\Code\Synplify\modules\uart.sv:59:0:59:9:@W:CL279:@XP_MSG">uart.sv(59)</a><!@TM:0> | Pruning register bits 14 to 5 of rx_index[14:0] </font>


</pre></samp></body></html>
